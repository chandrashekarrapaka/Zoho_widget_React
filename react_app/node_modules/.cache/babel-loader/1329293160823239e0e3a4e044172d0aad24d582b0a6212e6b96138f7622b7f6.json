{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\zoho-creator-widget-starter-template-reactJS\\\\react_app\\\\src\\\\Components\\\\Containers\\\\AA\\\\AA.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './AA.css';\n// import { LoginCredentialsAndQueries } from \"../../../Services/LoginCredentialsAndQueries\";\nimport { LoginCredentialsAndQueries } from \"../../../Services/loginCredentialsAndQueries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AA(prop) {\n  _s();\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [dataDisplay, setDataDisplay] = useState();\n  let params = \"\";\n  const currentPlant = prop.currentPlant;\n  useEffect(() => {\n    const fetchData = async () => {\n      if (accessToken && currentPlant) {\n        let now = new Date();\n        let dtTo = now.toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n        let dtFrom = new Date(now.getTime() - 48 * 60 * 60 * 1000).toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n        try {\n          const response = await fetch(\"https://api-idap.infinite-uptime.com/api/3.0/idap-api/anomaly-alerts?plantIds=\" + plantid + \"&from=\" + dtFrom + \"&to=\" + dtTo, {\n            method: \"GET\",\n            headers: {\n              accept: \"application/json\",\n              Authorization: \"Bearer \" + accessToken\n            }\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setDataDisplay(data);\n            console.log(\"alerts\", JSON.stringify(data));\n          } else {\n            console.error(\"Error:\", response.status);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    };\n    fetchData();\n  }, [accessToken, prop.currentPlant]);\n  console.log(\"AA1\" + currentPlant[0].plantid, accessToken);\n  let plantid = currentPlant[0].plantid;\n  useEffect(() => {\n    const fetchData = async () => {\n      let now = new Date();\n      let dtTo = now.toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n      let dtFrom = new Date(now.getTime() - 48 * 60 * 60 * 1000).toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n      try {\n        const response = await fetch(\"https://api-idap.infinite-uptime.com/api/3.0/idap-api/anomaly-alerts?plantIds=\" + plantid + \"&from=\" + dtFrom + \"&to=\" + dtTo, {\n          method: \"GET\",\n          headers: {\n            accept: \"application/json\",\n            Authorization: \"Bearer \" + accessToken\n          }\n        });\n        const data = await response.json();\n        setDataDisplay(data);\n        console.log(\"alerts\" + JSON.stringify(data));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, [prop.currentPlant]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"head\",\n      children: \"Anomaly Alert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: dataDisplay ? dataDisplay.map(ele => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: ele.machineName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 3\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_s(AA, \"B93Hc3g8AdsbkHs38nKMGA1OHdM=\");\n_c = AA;\nexport default AA;\nvar _c;\n$RefreshReg$(_c, \"AA\");","map":{"version":3,"names":["React","useState","useEffect","LoginCredentialsAndQueries","jsxDEV","_jsxDEV","AA","prop","_s","accessToken","setAccessToken","dataDisplay","setDataDisplay","params","currentPlant","fetchData","now","Date","dtTo","toISOString","replace","dtFrom","getTime","response","fetch","plantid","method","headers","accept","Authorization","ok","data","json","console","log","JSON","stringify","error","status","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","ele","machineName","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/src/Components/Containers/AA/AA.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport './AA.css';\r\n// import { LoginCredentialsAndQueries } from \"../../../Services/LoginCredentialsAndQueries\";\r\nimport { LoginCredentialsAndQueries } from \"../../../Services/loginCredentialsAndQueries\";\r\n\r\nfunction AA(prop) {\r\n    const [accessToken, setAccessToken] = useState(\"\");\r\n    const [dataDisplay,setDataDisplay]=useState();\r\n    let params = \"\";\r\n    const currentPlant = prop.currentPlant;\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          if (accessToken && currentPlant) {\r\n            let now = new Date();\r\n            let dtTo = now.toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\r\n            let dtFrom = new Date(now.getTime() - 48 * 60 * 60 * 1000)\r\n              .toISOString()\r\n              .replace(/\\.\\d+Z$/, \"Z\")\r\n              .replace(/:/g, \"%3A\");\r\n      \r\n            try {\r\n              const response = await fetch(\r\n                \"https://api-idap.infinite-uptime.com/api/3.0/idap-api/anomaly-alerts?plantIds=\" + plantid + \"&from=\" + dtFrom + \"&to=\" + dtTo,\r\n                {\r\n                  method: \"GET\",\r\n                  headers: {\r\n                    accept: \"application/json\",\r\n                    Authorization: \"Bearer \" + accessToken,\r\n                  },\r\n                }\r\n              );\r\n      \r\n              if (response.ok) {\r\n                const data = await response.json();\r\n                setDataDisplay(data);\r\n                console.log(\"alerts\", JSON.stringify(data));\r\n              } else {\r\n                console.error(\"Error:\", response.status);\r\n              }\r\n            } catch (error) {\r\n              console.error(error);\r\n            }\r\n          }\r\n        };\r\n      \r\n        fetchData();\r\n      }, [accessToken, prop.currentPlant]);\r\n\r\n    console.log(\"AA1\" + currentPlant[0].plantid, accessToken);\r\n    let plantid = currentPlant[0].plantid;\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let now = new Date();\r\nlet dtTo = now.toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\r\nlet dtFrom = new Date(now.getTime() - 48 * 60 * 60 * 1000)\r\n  .toISOString()\r\n  .replace(/\\.\\d+Z$/, \"Z\")\r\n  .replace(/:/g, \"%3A\");\r\n            \r\n            try {\r\n              const response = await fetch(\r\n                \"https://api-idap.infinite-uptime.com/api/3.0/idap-api/anomaly-alerts?plantIds=\" + plantid + \"&from=\" + dtFrom +\"&to=\" + dtTo,\r\n                {\r\n                  method: \"GET\",\r\n                  headers: {\r\n                    accept: \"application/json\",\r\n                    Authorization: \"Bearer \" + accessToken,\r\n                  },\r\n                }\r\n              );\r\n            \r\n              const data = await response.json();\r\n              setDataDisplay(data);\r\n              console.log(\"alerts\"+JSON.stringify(data));\r\n            } catch (error) {\r\n              console.error(error);\r\n            }\r\n            \r\n        };\r\n\r\n        fetchData();\r\n    }, [prop.currentPlant]);\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"head\">\r\n                Anomaly Alert\r\n            </div>\r\n            <div className=\"content\">\r\n            {dataDisplay ? dataDisplay.map((ele) => (\r\n  <div>{ele.machineName}</div>\r\n)) : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AA;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}