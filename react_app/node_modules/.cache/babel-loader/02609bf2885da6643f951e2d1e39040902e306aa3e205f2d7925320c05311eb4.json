{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\zoho-creator-widget-starter-template-reactJS\\\\react_app\\\\src\\\\Components\\\\Containers\\\\Plant\\\\MG.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Machine from \"./Machine\";\nimport \"./MG.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MG(props) {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1);\n  const machinesPerPage = 10;\n  useEffect(() => {\n    setCurrentPage(1); // Reset current page when new data is received\n  }, [props.mg]);\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  // Calculate the index range of machines to display based on the current page\n  const indexOfLastMachine = currentPage * machinesPerPage;\n  const indexOfFirstMachine = indexOfLastMachine - machinesPerPage;\n\n  // Extract the machines to display from the machine groups\n  let machinesToShow = [];\n  if (props.mg) {\n    props.mg.forEach(group => {\n      if (group.machines) {\n        machinesToShow = machinesToShow.concat(group.machines);\n      }\n    });\n  }\n  machinesToShow = machinesToShow.slice(indexOfFirstMachine, indexOfLastMachine);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MG\",\n    children: [machinesToShow.map(machine => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"machinesWrapper\",\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: machine.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), machine.monitors && /*#__PURE__*/_jsxDEV(Machine, {\n        machine: machine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 30\n      }, this), \" \"]\n    }, machine.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)), machinesToShow.length < machinesPerPage && props.mg && props.mg.length > machinesPerPage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from(Array(Math.ceil(props.mg.length / machinesPerPage)).keys()).map(pageNumber => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `pagination-button ${pageNumber + 1 === currentPage ? \"active\" : \"\"}`,\n        onClick: () => paginate(pageNumber + 1),\n        children: pageNumber + 1\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(MG, \"GDYsIxij9y/ZFL42bMqqthZmeP4=\");\n_c = MG;\nexport default MG;\nvar _c;\n$RefreshReg$(_c, \"MG\");","map":{"version":3,"names":["React","useState","useEffect","Machine","jsxDEV","_jsxDEV","MG","props","_s","currentPage","setCurrentPage","machinesPerPage","mg","paginate","pageNumber","indexOfLastMachine","indexOfFirstMachine","machinesToShow","forEach","group","machines","concat","slice","className","children","map","machine","style","textAlign","name","fileName","_jsxFileName","lineNumber","columnNumber","monitors","id","length","Array","from","Math","ceil","keys","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/src/Components/Containers/Plant/MG.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Machine from \"./Machine\";\r\nimport \"./MG.css\";\r\n\r\nfunction MG(props) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const machinesPerPage = 10;\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1); // Reset current page when new data is received\r\n  }, [props.mg]);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Calculate the index range of machines to display based on the current page\r\n  const indexOfLastMachine = currentPage * machinesPerPage;\r\n  const indexOfFirstMachine = indexOfLastMachine - machinesPerPage;\r\n\r\n  // Extract the machines to display from the machine groups\r\n  let machinesToShow = [];\r\n  if (props.mg) {\r\n    props.mg.forEach((group) => {\r\n      if (group.machines) {\r\n        machinesToShow = machinesToShow.concat(group.machines);\r\n      }\r\n    });\r\n  }\r\n  machinesToShow = machinesToShow.slice(indexOfFirstMachine, indexOfLastMachine);\r\n\r\n  return (\r\n    <div className=\"MG\">\r\n    {machinesToShow.map((machine) => (\r\n      <div className=\"machinesWrapper\" style={{ textAlign: \"center\" }} key={machine.id}>\r\n        <h4>{machine.name}</h4>\r\n        {machine.monitors && <Machine machine={machine} />} {/* Update this line */}\r\n      </div>\r\n    ))}\r\n\r\n      {machinesToShow.length < machinesPerPage && props.mg && props.mg.length > machinesPerPage && (\r\n        <div className=\"pagination\">\r\n          {Array.from(Array(Math.ceil(props.mg.length / machinesPerPage)).keys()).map((pageNumber) => (\r\n            <button\r\n              key={pageNumber}\r\n              className={`pagination-button ${pageNumber + 1 === currentPage ? \"active\" : \"\"}`}\r\n              onClick={() => paginate(pageNumber + 1)}\r\n            >\r\n              {pageNumber + 1}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MG;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}