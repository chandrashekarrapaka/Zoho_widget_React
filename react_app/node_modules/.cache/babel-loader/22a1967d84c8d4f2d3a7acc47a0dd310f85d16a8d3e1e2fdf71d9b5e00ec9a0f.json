{"ast":null,"code":"let intervalId;\nexport async function Plants() {\n  let accessToken = \"\";\n  const arrayOfPlants = [];\n  const arrayOfMachines = [];\n  const drsRequests = {};\n  let apicallstatus = true;\n  try {\n    const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\n      let accessTokenz = \"\";\n      let userid = window.ZOHO.CREATOR.UTIL.getQueryParams().user;\n      var config = {\n        appName: \"infinite-control-room\",\n        reportName: \"My_Profile_Data\",\n        criteria: \"Username == \\\"\" + userid + \"\\\"\",\n        page: \"1\",\n        pageSize: \"100\"\n      };\n      const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\n        let userData = response;\n        accessTokenz = userData.data[0].Access_Token;\n        return accessTokenz;\n      });\n      return access;\n    });\n    const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\n    });\n    const loginData = await loginResponse;\n    accessToken = loginData;\n    let orgid = queryParams.PlantId.split(\",\")[1];\n    const orgidAll = queryParams.PlantId.split(\",\");\n    const fetchPlantsData = async () => {\n      ////console.log(\"functioncalled\"+new Date().getMinutes);\n      try {\n        await Promise.all(orgidAll.map(async orgid => {\n          const plantsResponse = await fetch(`https://api.infinite-uptime.com/api/3.0/idap-api/plants/${orgid}/machine-group-stats`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Authorization': 'Bearer ' + accessToken\n            }\n          });\n          if (plantsResponse.status === 401) {\n            apicallstatus = false;\n            // Stop further API calls\n            // clearInterval(intervalId);\n            //console.log(\"apicallstatus: \" + apicallstatus);\n            return [[]], apicallstatus;\n          }\n          const plantsData = await plantsResponse.json();\n          const plantsArray = [];\n          const serviceRequestsIds = {\n            plant_ids: new Array(),\n            machine_ids: new Array()\n          };\n          // console.log(plantsData);\n\n          plantsData.data.machineGroups.forEach(mg => {\n            mg.machines.forEach(machine => {\n              machine.mg = mg.name;\n              machine.plantName = plantsData.data.name;\n              machine.plantid = plantsData.data.id;\n              plantsArray.push(machine);\n              if (!(typeof serviceRequestsIds.plant_ids != typeof undefined && serviceRequestsIds.plant_ids.length > 0 && serviceRequestsIds.plant_ids.includes(plantsData.data.id))) {\n                serviceRequestsIds.plant_ids.push(plantsData.data.id);\n              }\n              if (!(typeof serviceRequestsIds.machine_ids != typeof undefined && serviceRequestsIds.machine_ids.length > 0 && serviceRequestsIds.machine_ids.includes(machine.id))) {\n                serviceRequestsIds.machine_ids.push(machine.id);\n              }\n            });\n          });\n          arrayOfMachines.push(plantsArray);\n          arrayOfPlants.push(plantsData.data);\n          if (serviceRequestsIds.plant_ids.length > 0 && serviceRequestsIds.machine_ids.length > 0) {\n            const serviceRequests = await fetch(`https://api.infinite-uptime.com/api/3.0/idap-api/service-requests?plantIds=${serviceRequestsIds.plant_ids.join('&plantIds=')}&machineIds=${serviceRequestsIds.machine_ids.join('&machineIds=')}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Authorization': 'Bearer ' + accessToken\n              }\n            });\n            if (serviceRequests.status === 200) {\n              const serviceRequestData = await serviceRequests.json();\n              for (const plantId in serviceRequestData.data) {\n                serviceRequestData.data[plantId].forEach(async (v, index) => {\n                  if (v.serviceReqMachineDetails.length > 0) {\n                    v.serviceReqMachineDetails.forEach(async (m, index) => {\n                      if (!drsRequests[plantId]) {\n                        drsRequests[plantId] = {};\n                      }\n                      if (!drsRequests[plantId][m.machineId]) {\n                        drsRequests[plantId][m.machineId] = {};\n                      }\n                      if (!drsRequests[plantId][m.machineId][m.monitorId]) {\n                        drsRequests[plantId][m.machineId][m.monitorId] = {};\n                      }\n                      if (!drsRequests[plantId][m.machineId]['status']) {\n                        drsRequests[plantId][m.machineId]['status'] = 'COMPLETED';\n                      }\n                      drsRequests[plantId][m.machineId][m.monitorId] = m.serviceStatus;\n                      if (m.serviceStatus == 'NEW') {\n                        drsRequests[plantId][m.machineId]['status'] = 'NEW';\n                      }\n                    });\n                  }\n                });\n              }\n            }\n          }\n        }));\n      } catch (error) {\n        throw error;\n      }\n    };\n    await fetchPlantsData();\n\n    //intervalId = setInterval(fetchPlantsData, 30000);\n\n    return [arrayOfMachines, apicallstatus, drsRequests];\n  } catch (error) {\n    //console.error(error);\n    throw error;\n  }\n}\n_c = Plants;\nPlants().then(_ref => {\n  let [machines, status, drsRequests] = _ref;\n} //console.log(\"Machines:\", machines);\n//console.log(\"API Call Status:\", status);\n).catch(error => {\n  //console.log(\"Error:\", error);\n});\nvar _c;\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"names":["intervalId","Plants","accessToken","arrayOfPlants","arrayOfMachines","drsRequests","apicallstatus","loginResponse","window","ZOHO","CREATOR","init","then","data","accessTokenz","userid","UTIL","getQueryParams","user","config","appName","reportName","criteria","page","pageSize","access","API","getAllRecords","response","userData","Access_Token","queryParams","loginData","orgid","PlantId","split","orgidAll","fetchPlantsData","Promise","all","map","plantsResponse","fetch","method","headers","status","plantsData","json","plantsArray","serviceRequestsIds","plant_ids","Array","machine_ids","machineGroups","forEach","mg","machines","machine","name","plantName","plantid","id","push","undefined","length","includes","serviceRequests","join","serviceRequestData","plantId","v","index","serviceReqMachineDetails","m","machineId","monitorId","serviceStatus","error","_c","_ref","catch","$RefreshReg$"],"sources":["C:/Users/demo/Desktop/CRV/Zoho_widget_React/react_app/src/Services/Json.js"],"sourcesContent":["let intervalId;\n\nexport async function Plants() {\n  let accessToken = \"\";\n  const arrayOfPlants = [];\n  const arrayOfMachines = [];\n  const drsRequests = {};\n  let apicallstatus = true;\n\n  try {\n    const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\n      let accessTokenz = \"\";\n      let userid = window.ZOHO.CREATOR.UTIL.getQueryParams().user;\n\n      var config = {\n        appName: \"infinite-control-room\",\n        reportName: \"My_Profile_Data\",\n        criteria: \"Username == \\\"\" + userid + \"\\\"\",\n        page: \"1\",\n        pageSize: \"100\"\n      };\n\n      const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\n        let userData = response;\n        accessTokenz = userData.data[0].Access_Token;\n        return accessTokenz;\n      });\n      \n      return access;\n    });\n\n    const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\n    });\n\n    const loginData = await loginResponse;\n    accessToken = loginData;\n\n    let orgid = queryParams.PlantId.split(\",\")[1];\n    const orgidAll = queryParams.PlantId.split(\",\");\n\n    const fetchPlantsData = async () => {\n      ////console.log(\"functioncalled\"+new Date().getMinutes);\n      try {\n        await Promise.all(orgidAll.map(async (orgid) => {\n          const plantsResponse = await fetch(`https://api.infinite-uptime.com/api/3.0/idap-api/plants/${orgid}/machine-group-stats`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Authorization': 'Bearer ' + accessToken,\n            },\n          });\n\n          if (plantsResponse.status === 401) {\n            apicallstatus = false;\n            // Stop further API calls\n           // clearInterval(intervalId);\n            //console.log(\"apicallstatus: \" + apicallstatus);\n            return [[]],apicallstatus;\n          }\n          \n          const plantsData = await plantsResponse.json();\n          const plantsArray = [];\n          const serviceRequestsIds = {\n            plant_ids: new Array,\n            machine_ids: new Array,\n          };\n         // console.log(plantsData);\n          \n          plantsData.data.machineGroups.forEach((mg) => {\n            mg.machines.forEach((machine) => {\n              machine.mg = mg.name;\n              machine.plantName = plantsData.data.name;\n              machine.plantid = plantsData.data.id;\n              plantsArray.push(machine);\n\n              if (!(\n                typeof serviceRequestsIds.plant_ids != typeof undefined &&\n                serviceRequestsIds.plant_ids.length > 0 &&\n                serviceRequestsIds.plant_ids.includes(plantsData.data.id)\n              )) {\n                serviceRequestsIds.plant_ids.push(plantsData.data.id);\n              }\n\n              if (!(\n                typeof serviceRequestsIds.machine_ids != typeof undefined &&\n                serviceRequestsIds.machine_ids.length > 0 &&\n                serviceRequestsIds.machine_ids.includes(machine.id)\n              )) {\n                serviceRequestsIds.machine_ids.push(machine.id);\n              }\n            });\n          });\n\n          arrayOfMachines.push(plantsArray);\n          arrayOfPlants.push(plantsData.data);\n\n          if (serviceRequestsIds.plant_ids.length > 0 && serviceRequestsIds.machine_ids.length > 0) {\n            const serviceRequests = await fetch(`https://api.infinite-uptime.com/api/3.0/idap-api/service-requests?plantIds=${serviceRequestsIds.plant_ids.join('&plantIds=')}&machineIds=${serviceRequestsIds.machine_ids.join('&machineIds=')}`, {\n              method: 'GET',\n              headers: {\n                'accept': 'application/json',\n                'Authorization': 'Bearer ' + accessToken,\n              }\n            });\n      \n            if (serviceRequests.status === 200) {\n              const serviceRequestData = await serviceRequests.json();\n      \n              for (const plantId in serviceRequestData.data) {\n                serviceRequestData.data[plantId].forEach(async (v, index) => {\n                  if (v.serviceReqMachineDetails.length > 0) {\n                    v.serviceReqMachineDetails.forEach(async (m, index) => {\n                      if (! drsRequests[plantId]) {\n                        drsRequests[plantId] = {};\n                      }\n      \n                      if (! drsRequests[plantId][m.machineId]) {\n                        drsRequests[plantId][m.machineId] = {};\n                      }\n      \n                      if (! drsRequests[plantId][m.machineId][m.monitorId]) {\n                        drsRequests[plantId][m.machineId][m.monitorId] = {};\n                      }\n      \n                      if (! drsRequests[plantId][m.machineId]['status']) {\n                        drsRequests[plantId][m.machineId]['status'] = 'COMPLETED';\n                      }\n      \n                      drsRequests[plantId][m.machineId][m.monitorId] = m.serviceStatus;\n      \n                      if (m.serviceStatus == 'NEW') {\n                        drsRequests[plantId][m.machineId]['status'] = 'NEW';\n                      }\n                    });\n                  }\n                });\n              }\n            }\n          }\n        }));\n      } catch (error) {\n        throw error;\n      }\n    };\n\n    await fetchPlantsData();\n\n    \n    //intervalId = setInterval(fetchPlantsData, 30000);\n\n    return [arrayOfMachines, apicallstatus, drsRequests];\n\n  } catch (error) {\n    //console.error(error);\n    throw error;\n  }\n}\n\n\nPlants()\n  .then(([machines, status, drsRequests]) => {\n    //console.log(\"Machines:\", machines);\n    //console.log(\"API Call Status:\", status);\n  })\n  .catch((error) => {\n    //console.log(\"Error:\", error);\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}