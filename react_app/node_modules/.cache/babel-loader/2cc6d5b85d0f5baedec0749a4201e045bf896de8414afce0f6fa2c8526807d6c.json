{"ast":null,"code":"export async function Velocity() {\n  let accessToken = \"\";\n  const arrayOfMachines = [];\n  try {\n    const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\n      let accessTokenz = \"\";\n      var config = {\n        appName: \"infinite-control-room\",\n        reportName: \"All_Users\",\n        criteria: 'Username == \"rapaka.chandrashekar@gmail.com\"',\n        page: \"1\",\n        pageSize: \"100\"\n      };\n      const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\n        let userData = response;\n        accessTokenz = userData.data[0].Access_Token;\n        return accessTokenz;\n      });\n      return access;\n    });\n    const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\n    });\n    const loginData = await loginResponse;\n    accessToken = loginData;\n    const orgidAll = queryParams.PlantId.split(\",\");\n    let plantsData;\n    let plantsResponse;\n    const fetchData = async () => {\n      console.log(\"running\");\n      try {\n        plantsResponse = await Promise.all(orgidAll.map(async orgid => {\n          plantsResponse = await fetch(`https://api-idap.infinite-uptime.com/api/2.0/md/monitoring/bymonitors?plantId=${orgid}`, {\n            method: \"GET\",\n            headers: {\n              accept: \"application/json\",\n              Authorization: \"Bearer \" + accessToken\n            }\n          });\n          plantsData = await plantsResponse.json();\n          plantsData.machineGroups.map(mg => {\n            mg.machines.map(machine => {\n              arrayOfMachines.push(machine);\n            });\n          });\n        }));\n        console.log(\"velocityarrayofMachines\", arrayOfMachines);\n      } catch (error) {\n        console.error(error);\n        throw error;\n      }\n    };\n    fetchData(); // Initial data fetch\n\n    const interval = setInterval(fetchData, 2000); // Fetch data every 2 seconds\n\n    // You can clearInterval(interval) to stop fetching data\n\n    return arrayOfMachines;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n_c = Velocity;\nvar _c;\n$RefreshReg$(_c, \"Velocity\");","map":{"version":3,"names":["Velocity","accessToken","arrayOfMachines","loginResponse","window","ZOHO","CREATOR","init","then","data","accessTokenz","config","appName","reportName","criteria","page","pageSize","access","API","getAllRecords","response","userData","Access_Token","queryParams","UTIL","getQueryParams","loginData","orgidAll","PlantId","split","plantsData","plantsResponse","fetchData","console","log","Promise","all","map","orgid","fetch","method","headers","accept","Authorization","json","machineGroups","mg","machines","machine","push","error","interval","setInterval","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/src/Services/Velocity.js"],"sourcesContent":["export async function Velocity() {\r\n    let accessToken = \"\";\r\n    const arrayOfMachines = [];\r\n  \r\n    try {\r\n      const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\r\n        let accessTokenz = \"\";\r\n  \r\n        var config = {\r\n          appName: \"infinite-control-room\",\r\n          reportName: \"All_Users\",\r\n          criteria: 'Username == \"rapaka.chandrashekar@gmail.com\"',\r\n          page: \"1\",\r\n          pageSize: \"100\",\r\n        };\r\n  \r\n        const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\r\n          let userData = response;\r\n          accessTokenz = userData.data[0].Access_Token;\r\n          return accessTokenz;\r\n        });\r\n  \r\n        return access;\r\n      });\r\n  \r\n      const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\r\n        return window.ZOHO.CREATOR.UTIL.getQueryParams();\r\n      });\r\n  \r\n      const loginData = await loginResponse;\r\n      accessToken = loginData;\r\n  \r\n      const orgidAll = queryParams.PlantId.split(\",\");\r\n      let plantsData;\r\n      let plantsResponse;\r\n  \r\n      const fetchData = async () => {\r\n        console.log(\"running\")\r\n        try {\r\n          plantsResponse = await Promise.all(\r\n            orgidAll.map(async (orgid) => {\r\n              plantsResponse = await fetch(\r\n                `https://api-idap.infinite-uptime.com/api/2.0/md/monitoring/bymonitors?plantId=${orgid}`,\r\n                {\r\n                  method: \"GET\",\r\n                  headers: {\r\n                    accept: \"application/json\",\r\n                    Authorization: \"Bearer \" + accessToken,\r\n                  },\r\n                }\r\n              );\r\n  \r\n              plantsData = await plantsResponse.json();\r\n  \r\n              plantsData.machineGroups.map((mg) => {\r\n                mg.machines.map((machine) => {\r\n                  arrayOfMachines.push(machine);\r\n                });\r\n              });\r\n            })\r\n          );\r\n  \r\n          console.log(\"velocityarrayofMachines\", arrayOfMachines);\r\n        } catch (error) {\r\n          console.error(error);\r\n          throw error;\r\n        }\r\n      };\r\n  \r\n      fetchData(); // Initial data fetch\r\n  \r\n      const interval = setInterval(fetchData, 2000); // Fetch data every 2 seconds\r\n  \r\n      // You can clearInterval(interval) to stop fetching data\r\n  \r\n      return arrayOfMachines;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}