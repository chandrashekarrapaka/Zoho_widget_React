{"ast":null,"code":"export async function Plants() {\n  let accessToken = \"\";\n  const arrayOfPlants = [];\n  const arrayOfMachines = [];\n  //   const handleScriptLoad = async() => {\n\n  //     console.log(\"hero\")\n  //     // await window.ZOHO.CREATOR.init().then(function(data) {\n\n  //     //  // var queryParams = window.ZOHO.CREATOR.UTIL.getQueryParams();\n  //     //  const email=\"rapaka.chandrashekar@gmail.com\";//Stage == \\\"Open\\\"\n  //     //    var config = {\n  //     //     appName: \"infinite-control-room\",\n  //     //     reportName: \"All_Users\",\n  //     //     criteria: \"Username ==\\\"rapaka.chandrashekar@gmail.com\\\"\",\n  //     //     page: \"1\",\n  //     //     pageSize: \"100\"\n  //     //   }\n\n  //     //   //get all records API\n  //     //   window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\n  //     //     //callback block\n  //     //     let userData = response;\n\n  //     //     accessToken=JSON.stringify(userData.data[0].Access_Token);\n  //     //     console.log(\"userData\"+JSON.stringify(userData.data[0].Access_Token));\n  //     //    // console.log(\"check\"+accessToken);\n  //     //    // return accessToken;\n  //     //   });\n\n  //     // });\n\n  //   };\n  //  await handleScriptLoad();\n\n  try {\n    const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\n      let accessTokenz = \"\";\n      const userid = window.ZOHO.CREATOR.UTIL.getQueryParams().user;\n      console.log(\"userid\" + userid);\n      var config = {\n        appName: \"infinite-control-room\",\n        reportName: \"All_Users\",\n        criteria: \"Username ==\\\"\" + userid + \"\\\"\",\n        page: \"1\",\n        pageSize: \"100\"\n      };\n      const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\n        let userData = response;\n        accessTokenz = userData.data[0].Access_Token;\n        console.log(\"userData\" + JSON.stringify(userData.data[0].Access_Token));\n        // console.log(\"check\"+accessToken);\n        // return accessToken;\n        return accessTokenz;\n      });\n      return access;\n    });\n    const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\n    });\n    const loginData = await loginResponse;\n    // console.log(\"loginData\"+ loginData);\n    accessToken = loginData;\n    //accessToken=\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyY0NxRnpxRXJrNU5GS1RjTi1YSk1IdE9NS2tWVTZXS1hIdHZFMF8xZE5ZIn0.eyJleHAiOjE2ODY5NTQ5OTEsImlhdCI6MTY4NjkxMTc5MSwianRpIjoiNDU0MGQ1MTctNjE1ZS00NDZmLTgxOTgtNTc1YzY1ZjUwZmM3IiwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS5pbmZpbml0ZS11cHRpbWUuY29tL3JlYWxtcy9pZGFwIiwic3ViIjoiZjo2MGNhNzY4Yy1iMTA0LTQ0OTktYjU4Yy05MzliOTdlNzAzM2Q6ODcxMSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlkYXAiLCJzZXNzaW9uX3N0YXRlIjoiNGQ0YjUzMDAtM2NlZC00ZTk5LTlmNDEtYmRjMDI0ZjJkMzhlIiwic2NvcGUiOiJlbWFpbCIsInNpZCI6IjRkNGI1MzAwLTNjZWQtNGU5OS05ZjQxLWJkYzAyNGYyZDM4ZSIsImlzX2FkbWluIjoiZmFsc2UiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImlkYXBfcm9sZSI6IlJPTEVfVVNFUiIsImVtYWlsIjoiUmFwYWthLmNoYW5kcmFzaGVrYXJAZ21haWwuY29tIn0.l8NL7t1Kqf77hOHo_kGSpcKzDoSjFFYmKdyn3y6-fC45B_ICvvYz_FLMfazPMOxVzMG0nb0nD88y_J45wFYTjLnfwbZbIzw--vbVKt1EMe4qK6ko4wv1jTRrjg97m7PaQL3FLcv1JSPafJ8ukPm1z4BPo0tpoHlbZX1vCGwm1ZgdJqTBM6bJrtrLyB1EcABWsXIbd7r_756vua7sOO_7ZkAppAiHTV3qqjM5N0cjHaKTkMXYAiVkl6kBpsZf7N8CCdwkZTKV3rapK_zQGJhS2VxSNkeiERF2Y16nyPxSjxyzQFBB6I0AB2xqSSWlhJ6Shk2yaaI1MB9_cdt8oOgJPg\";\n    console.log(\"queryParams\" + JSON.stringify(queryParams));\n\n    //console.log(\"accessToken\"+accessToken);\n    //console.log(\"check\"+ accessToken);\n\n    let orgid = queryParams.PlantId.split(\",\")[1];\n    const orgidAll = queryParams.PlantId.split(\",\");\n    let plantsData;\n    let plantsResponse;\n    plantsResponse = await Promise.all(orgidAll.map(async orgid => {\n      plantsResponse = await fetch(`https://api-idap.infinite-uptime.com/api/3.0/idap-api/plants/${orgid}/machine-group-stats`, {\n        method: 'GET',\n        headers: {\n          'accept': 'application/json',\n          'Authorization': 'Bearer ' + accessToken\n        }\n      });\n      plantsData = await plantsResponse.json();\n      const plantsArray = [];\n      // console.log(\"plantsdata\",  plantsData.data.machineGroups);\n      plantsData.data.machineGroups.map(mg => {\n        //console.log(\"plantsdata\", mg.machines);\n        mg.machines.map(machine => {\n          machine.mg = mg.name;\n          machine.plantName = plantsData.data.name;\n          machine.plantid = plantsData.data.id;\n          plantsArray.push(machine);\n        });\n      });\n      arrayOfMachines.push(plantsArray);\n      arrayOfPlants.push(plantsData.data);\n    }));\n    //console.log(\"check\"+ headers);\n\n    arrayOfPlants.map(ele => {\n      console.log(\"arrayOfPlants\", ele);\n    });\n    console.log(\"arrayofMachines\", arrayOfMachines);\n    return arrayOfMachines;\n    // console.log(\"newMachines\"+JSON.stringify(newMachines));\n    // return newMachines;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n_c = Plants;\nvar _c;\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"names":["Plants","accessToken","arrayOfPlants","arrayOfMachines","loginResponse","window","ZOHO","CREATOR","init","then","data","accessTokenz","userid","UTIL","getQueryParams","user","console","log","config","appName","reportName","criteria","page","pageSize","access","API","getAllRecords","response","userData","Access_Token","JSON","stringify","queryParams","loginData","orgid","PlantId","split","orgidAll","plantsData","plantsResponse","Promise","all","map","fetch","method","headers","json","plantsArray","machineGroups","mg","machines","machine","name","plantName","plantid","id","push","ele","error","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/src/Services/Json.js"],"sourcesContent":["\r\nexport async function Plants() {\r\n  let accessToken=\"\";\r\n  const arrayOfPlants=[];\r\n  const arrayOfMachines=[];\r\n//   const handleScriptLoad = async() => {\r\n    \r\n//     console.log(\"hero\")\r\n//     // await window.ZOHO.CREATOR.init().then(function(data) {\r\n      \r\n//     //  // var queryParams = window.ZOHO.CREATOR.UTIL.getQueryParams();\r\n//     //  const email=\"rapaka.chandrashekar@gmail.com\";//Stage == \\\"Open\\\"\r\n//     //    var config = {\r\n//     //     appName: \"infinite-control-room\",\r\n//     //     reportName: \"All_Users\",\r\n//     //     criteria: \"Username ==\\\"rapaka.chandrashekar@gmail.com\\\"\",\r\n//     //     page: \"1\",\r\n//     //     pageSize: \"100\"\r\n//     //   }\r\n  \r\n//     //   //get all records API\r\n//     //   window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\r\n//     //     //callback block\r\n//     //     let userData = response;\r\n        \r\n//     //     accessToken=JSON.stringify(userData.data[0].Access_Token);\r\n//     //     console.log(\"userData\"+JSON.stringify(userData.data[0].Access_Token));\r\n//     //    // console.log(\"check\"+accessToken);\r\n//     //    // return accessToken;\r\n//     //   });\r\n      \r\n      \r\n//     // });\r\n   \r\n   \r\n//   };\r\n//  await handleScriptLoad();\r\n  \r\n\r\n\r\n    try {\r\n       \r\n      const loginResponse =  await window.ZOHO.CREATOR.init().then(function(data) {\r\n        let accessTokenz=\"\";\r\n      const userid=window.ZOHO.CREATOR.UTIL.getQueryParams().user;\r\n        console.log(\"userid\"+userid)\r\n      \r\n       var config = {\r\n        appName: \"infinite-control-room\",\r\n        reportName: \"All_Users\",\r\n        criteria: \"Username ==\\\"\"+userid+\"\\\"\",\r\n        page: \"1\",\r\n        pageSize: \"100\"\r\n      }\r\n      const access=window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\r\n        let userData = response;\r\n        \r\n        accessTokenz=userData.data[0].Access_Token;\r\n        console.log(\"userData\"+JSON.stringify(userData.data[0].Access_Token));\r\n       // console.log(\"check\"+accessToken);\r\n       // return accessToken;\r\n      return accessTokenz;\r\n      });\r\n      return access;\r\n    });\r\n    const queryParams =  await window.ZOHO.CREATOR.init().then(function(data) { \r\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\r\n    });\r\n  \r\n      const loginData = await loginResponse;\r\n      // console.log(\"loginData\"+ loginData);\r\n     accessToken = loginData;\r\n      //accessToken=\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyY0NxRnpxRXJrNU5GS1RjTi1YSk1IdE9NS2tWVTZXS1hIdHZFMF8xZE5ZIn0.eyJleHAiOjE2ODY5NTQ5OTEsImlhdCI6MTY4NjkxMTc5MSwianRpIjoiNDU0MGQ1MTctNjE1ZS00NDZmLTgxOTgtNTc1YzY1ZjUwZmM3IiwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS5pbmZpbml0ZS11cHRpbWUuY29tL3JlYWxtcy9pZGFwIiwic3ViIjoiZjo2MGNhNzY4Yy1iMTA0LTQ0OTktYjU4Yy05MzliOTdlNzAzM2Q6ODcxMSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImlkYXAiLCJzZXNzaW9uX3N0YXRlIjoiNGQ0YjUzMDAtM2NlZC00ZTk5LTlmNDEtYmRjMDI0ZjJkMzhlIiwic2NvcGUiOiJlbWFpbCIsInNpZCI6IjRkNGI1MzAwLTNjZWQtNGU5OS05ZjQxLWJkYzAyNGYyZDM4ZSIsImlzX2FkbWluIjoiZmFsc2UiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImlkYXBfcm9sZSI6IlJPTEVfVVNFUiIsImVtYWlsIjoiUmFwYWthLmNoYW5kcmFzaGVrYXJAZ21haWwuY29tIn0.l8NL7t1Kqf77hOHo_kGSpcKzDoSjFFYmKdyn3y6-fC45B_ICvvYz_FLMfazPMOxVzMG0nb0nD88y_J45wFYTjLnfwbZbIzw--vbVKt1EMe4qK6ko4wv1jTRrjg97m7PaQL3FLcv1JSPafJ8ukPm1z4BPo0tpoHlbZX1vCGwm1ZgdJqTBM6bJrtrLyB1EcABWsXIbd7r_756vua7sOO_7ZkAppAiHTV3qqjM5N0cjHaKTkMXYAiVkl6kBpsZf7N8CCdwkZTKV3rapK_zQGJhS2VxSNkeiERF2Y16nyPxSjxyzQFBB6I0AB2xqSSWlhJ6Shk2yaaI1MB9_cdt8oOgJPg\";\r\n       console.log(\"queryParams\"+JSON.stringify(queryParams));\r\n       \r\n      //console.log(\"accessToken\"+accessToken);\r\n      //console.log(\"check\"+ accessToken);\r\n      \r\n      let orgid=queryParams.PlantId.split(\",\")[1];\r\n      const orgidAll=queryParams.PlantId.split(\",\");\r\n    let plantsData;\r\n    let plantsResponse\r\n    plantsResponse=await Promise.all(orgidAll.map(async(orgid)=>{\r\n       plantsResponse = await fetch(`https://api-idap.infinite-uptime.com/api/3.0/idap-api/plants/${orgid}/machine-group-stats`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'accept': 'application/json',\r\n          'Authorization': 'Bearer '+accessToken,\r\n        },\r\n      });\r\n      plantsData = await plantsResponse.json();\r\n      const plantsArray=[];\r\n      // console.log(\"plantsdata\",  plantsData.data.machineGroups);\r\n      plantsData.data.machineGroups.map((mg)=>{\r\n        //console.log(\"plantsdata\", mg.machines);\r\n        mg.machines.map((machine)=>{\r\n          machine.mg=mg.name;\r\n          machine.plantName=plantsData.data.name;\r\n          machine.plantid=plantsData.data.id;\r\n          plantsArray.push(machine);\r\n        })\r\n        \r\n      })\r\n      arrayOfMachines.push(plantsArray);\r\n      arrayOfPlants.push(plantsData.data);\r\n    }));\r\n      //console.log(\"check\"+ headers);\r\n      \r\n      arrayOfPlants.map((ele)=>{\r\n        console.log(\"arrayOfPlants\",ele);\r\n      })\r\n      console.log(\"arrayofMachines\",arrayOfMachines);\r\n      \r\n       return arrayOfMachines;\r\n      // console.log(\"newMachines\"+JSON.stringify(newMachines));\r\n      // return newMachines;\r\n\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}