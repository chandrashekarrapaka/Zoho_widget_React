{"ast":null,"code":"let intervalId;\nexport async function Plants() {\n  let accessToken = \"\";\n  const arrayOfPlants = [];\n  const arrayOfMachines = [];\n  let apicallstatus = true;\n  try {\n    const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\n      let accessTokenz = \"\";\n      let app_assign = \"\";\n      let userid = window.ZOHO.CREATOR.UTIL.getQueryParams().user;\n      var config = {\n        appName: \"infinite-control-room\",\n        reportName: \"My_Profile_Data\",\n        criteria: \"Username == \\\"\" + userid + \"\\\"\",\n        page: \"1\",\n        pageSize: \"100\"\n      };\n      const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\n        let userData = response;\n        accessTokenz = userData.data[0].Access_Token;\n        app_assign = userData.data[0].Apps_Assigned;\n        return [accessTokenz, app_assign];\n      });\n      return access;\n    });\n    const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\n    });\n    const loginData = await loginResponse;\n    accessToken = loginData[0];\n    let orgid = queryParams.PlantId.split(\",\")[1];\n    const orgidAll = queryParams.PlantId.split(\",\");\n    const fetchPlantsData = async () => {\n      ////console.log(\"functioncalled\"+new Date().getMinutes);\n      try {\n        await Promise.all(orgidAll.map(async orgid => {\n          const plantsResponse = await fetch(`https://api.infinite-uptime.com/api/3.0/idap-api/plants/${orgid}/machine-group-stats`, {\n            method: 'GET',\n            headers: {\n              'accept': 'application/json',\n              'Authorization': 'Bearer ' + accessToken\n            }\n          });\n          if (plantsResponse.status === 401) {\n            apicallstatus = false;\n            // Stop further API calls\n            // clearInterval(intervalId);\n            //console.log(\"apicallstatus: \" + apicallstatus);\n            return [[]], apicallstatus;\n          }\n          const plantsData = await plantsResponse.json();\n          const plantsArray = [];\n          // console.log(plantsData);\n\n          plantsData.data.machineGroups.forEach(mg => {\n            mg.machines.forEach(machine => {\n              machine.mg = mg.name;\n              machine.plantName = plantsData.data.name;\n              machine.plantid = plantsData.data.id;\n              plantsArray.push(machine);\n            });\n          });\n          arrayOfMachines.push(plantsArray);\n          arrayOfPlants.push(plantsData.data);\n        }));\n      } catch (error) {\n        throw error;\n      }\n    };\n    await fetchPlantsData();\n\n    //intervalId = setInterval(fetchPlantsData, 30000);\n\n    return [arrayOfMachines, apicallstatus];\n  } catch (error) {\n    //console.error(error);\n    throw error;\n  }\n}\n_c = Plants;\nPlants().then(_ref => {\n  let [machines, status] = _ref;\n} //console.log(\"Machines:\", machines);\n//console.log(\"API Call Status:\", status);\n).catch(error => {\n  //console.log(\"Error:\", error);\n});\nvar _c;\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"names":["intervalId","Plants","accessToken","arrayOfPlants","arrayOfMachines","apicallstatus","loginResponse","window","ZOHO","CREATOR","init","then","data","accessTokenz","app_assign","userid","UTIL","getQueryParams","user","config","appName","reportName","criteria","page","pageSize","access","API","getAllRecords","response","userData","Access_Token","Apps_Assigned","queryParams","loginData","orgid","PlantId","split","orgidAll","fetchPlantsData","Promise","all","map","plantsResponse","fetch","method","headers","status","plantsData","json","plantsArray","machineGroups","forEach","mg","machines","machine","name","plantName","plantid","id","push","error","_c","_ref","catch","$RefreshReg$"],"sources":["C:/Users/chandrashekar.rapaka/Desktop/git/Zoho_widget_React/react_app/src/Services/Json.js"],"sourcesContent":["let intervalId;\r\n\r\nexport async function Plants() {\r\n  let accessToken = \"\";\r\n  const arrayOfPlants = [];\r\n  const arrayOfMachines = [];\r\n  let apicallstatus = true;\r\n\r\n  try {\r\n    const loginResponse = await window.ZOHO.CREATOR.init().then(function (data) {\r\n      let accessTokenz = \"\";\r\n      let app_assign=\"\";\r\n      let userid = window.ZOHO.CREATOR.UTIL.getQueryParams().user;\r\n\r\n      var config = {\r\n        appName: \"infinite-control-room\",\r\n        reportName: \"My_Profile_Data\",\r\n        criteria: \"Username == \\\"\" + userid + \"\\\"\",\r\n        page: \"1\",\r\n        pageSize: \"100\"\r\n      };\r\n\r\n      const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\r\n        let userData = response;\r\n        accessTokenz = userData.data[0].Access_Token;\r\n        app_assign=userData.data[0].Apps_Assigned;\r\n        return [accessTokenz,app_assign];\r\n      });\r\n      \r\n      return access;\r\n    });\r\n\r\n    const queryParams = await window.ZOHO.CREATOR.init().then(function (data) {\r\n      return window.ZOHO.CREATOR.UTIL.getQueryParams();\r\n    });\r\n\r\n    const loginData = await loginResponse;\r\n    accessToken = loginData[0];\r\n\r\n    let orgid = queryParams.PlantId.split(\",\")[1];\r\n    const orgidAll = queryParams.PlantId.split(\",\");\r\n\r\n    const fetchPlantsData = async () => {\r\n      ////console.log(\"functioncalled\"+new Date().getMinutes);\r\n      try {\r\n        await Promise.all(orgidAll.map(async (orgid) => {\r\n          const plantsResponse = await fetch(`https://api.infinite-uptime.com/api/3.0/idap-api/plants/${orgid}/machine-group-stats`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'accept': 'application/json',\r\n              'Authorization': 'Bearer ' + accessToken,\r\n            },\r\n          });\r\n\r\n          if (plantsResponse.status === 401) {\r\n            apicallstatus = false;\r\n            // Stop further API calls\r\n           // clearInterval(intervalId);\r\n            //console.log(\"apicallstatus: \" + apicallstatus);\r\n            return [[]],apicallstatus;\r\n          }\r\n          \r\n          const plantsData = await plantsResponse.json();\r\n          const plantsArray = [];\r\n         // console.log(plantsData);\r\n          \r\n          plantsData.data.machineGroups.forEach((mg) => {\r\n            mg.machines.forEach((machine) => {\r\n              machine.mg = mg.name;\r\n              machine.plantName = plantsData.data.name;\r\n              machine.plantid = plantsData.data.id;\r\n              plantsArray.push(machine);\r\n            });\r\n          });\r\n\r\n          arrayOfMachines.push(plantsArray);\r\n          arrayOfPlants.push(plantsData.data);\r\n          \r\n        }));\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    };\r\n\r\n    await fetchPlantsData();\r\n\r\n    \r\n    //intervalId = setInterval(fetchPlantsData, 30000);\r\n\r\n    return [arrayOfMachines, apicallstatus];\r\n\r\n  } catch (error) {\r\n    //console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nPlants()\r\n  .then(([machines, status]) => {\r\n    //console.log(\"Machines:\", machines);\r\n    //console.log(\"API Call Status:\", status);\r\n  })\r\n  .catch((error) => {\r\n    //console.log(\"Error:\", error);\r\n  });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}