{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\demo\\\\Desktop\\\\CRV\\\\Zoho_widget_React\\\\react_app\\\\src\\\\Components\\\\Containers\\\\Scrollbar\\\\AlertsBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { LoginCredentialsAndQueries } from \"../../../Services/loginCredentialsAndQueries\";\nimport './AlertsBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AlertsBar = prop => {\n  _s();\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [dataDisplay, setDataDisplay] = useState();\n  const [totalAlerts, setTotalAlerts] = useState([]);\n  const [animationDuration, setAnimationDuration] = useState(30);\n  const [animationPaused, setAnimationPaused] = useState(false);\n  let contentLength = 0;\n  const totalPlants = prop.plantsData;\n  const currentPlant = prop.currentPlant;\n  //console.log(\"AA1\", currentPlant[0].plantid, accessToken);\n\n  useEffect(() => {\n    const fetchDataz = async () => {\n      try {\n        const response = await LoginCredentialsAndQueries();\n        if (response.length > 0) {\n          //console.log(\"responseAA\", response);\n          setAccessToken(response);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchDataz();\n  }, [prop.currentPlant]);\n\n  //let plantid = currentPlant[0].plantid;\n  useEffect(() => {\n    const fetchData = async () => {\n      let now = new Date();\n      let dtTo = now.toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n      let dtFrom = new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n      try {\n        const fetchPromises = totalPlants.map(async element => {\n          //console.log()\n          const plantid = element[0].plantid;\n          //console.log(\"id\"+plantid);\n          const response = await fetch(\"https://api.infinite-uptime.com/api/3.0/idap-api/anomaly-alerts/plants?plantIds=\" + plantid + \"&from=\" + dtFrom + \"&to=\" + dtTo, {\n            method: \"GET\",\n            headers: {\n              accept: \"application/json\",\n              Authorization: \"Bearer \" + accessToken\n            }\n          });\n          if (response.ok) {\n            const data = await response.json();\n            // console.log(\"datacheck1\"+data.data.length);\n            // console.log(\"datacheck1\"+data.data.length);\n            if (data && data.data.length > 0) {\n              const response2 = await fetch(\"https://api.infinite-uptime.com/api/3.0/idap-api/service-requests?plantIds=\" + plantid, {\n                method: \"GET\",\n                headers: {\n                  accept: \"application/json\",\n                  Authorization: \"Bearer \" + accessToken\n                }\n              });\n              // console.log(response2.ok);\n              if (response2.ok) {\n                const data2 = await response2.json();\n                // console.log(\"datacheck2\"+data2);\n                if (data2 && data.data.length > 0 && Object.keys(data2).length > 0) {\n                  let newData = [];\n                  newData.push(data);\n                  newData.push(data2);\n                  return newData;\n                }\n              }\n            }\n          }\n\n          // Handle cases where the API call is not successful (e.g., 401 Unauthorized)\n          // return null;\n          //console.log(\"data2\",data2);\n        });\n\n        const alertsData = await Promise.all(fetchPromises);\n        //console.log(\"data\",JSON.stringify(alertsData));\n        let dummy = [];\n        alertsData.map(ele => {\n          if (ele != undefined) {\n            //aa\n            const alert1 = ele[0].data.flat();\n            //mf\n            let key = Object.keys(ele[1].data);\n            // console.log(key);\n            const alert2 = ele[1].data[key].filter(ele => ele.status === \"NEW\");\n            dummy.push(alert1);\n            const alert2v1 = alert2 => {\n              let newAlert = [];\n              alert2.map(ele => {\n                if (check24(ele)) {\n                  newAlert.push(ele);\n                  //dummy.push(ele);\n                }\n              });\n\n              return newAlert;\n            };\n            dummy.push(alert2v1(alert2));\n          }\n        });\n        //console.log(\"hero\"+JSON.stringify(dummy));\n        // Combine all alerts from different plants into a single array\n        const combinedAlerts = dummy.flat();\n        //console.log(combinedAlerts);\n        // const newZ=combinedAlerts.push(\"=\");\n        setTotalAlerts(prevAlert => prevAlert.length === combinedAlerts.length ? prevAlert : combinedAlerts);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n    // const interval = setInterval(fetchData, 30000);\n\n    // return () => {\n    //   clearInterval(interval);\n    // };\n  }, [currentPlant, accessToken, totalPlants, totalAlerts]);\n  //console.log(\"data\"+JSON.stringify(totalAlerts),totalAlerts.length);\n  let lengthofDisplay = totalAlerts && totalAlerts.length == 0;\n  useEffect(() => {\n    if (totalAlerts && totalAlerts.length > 0) {\n      contentLength = totalAlerts.reduce((length, ele) => {\n        if (ele) {\n          const textValues = Object.values(ele).filter(value => typeof value === \"string\");\n          const textLength = textValues.join('').length;\n          return length + textLength;\n        }\n        return length;\n      }, 0);\n      if (!isNaN(contentLength) && contentLength > 0) {\n        const durationFactor = 0.05;\n        const calculatedDuration = Math.max(30, contentLength * durationFactor);\n        setAnimationDuration(calculatedDuration);\n      } else {\n        console.error(\"invalid content length\", contentLength);\n      }\n    }\n  }, [totalAlerts]);\n\n  //  console.log(\"checking\",lengthofDisplay,dataDisplay.data.length)\n\n  function parseCustomDate(dateString) {\n    const dateObject = new Date(dateString);\n    return dateObject;\n  }\n  const check24 = ele => {\n    if (ele.status) {\n      const dateString = parseCustomDate(ele.createdDate);\n      const date = new Date(dateString);\n      const currentDate = new Date();\n      const timeDifference = currentDate - date;\n      const hoursDifference = timeDifference / (1000 * 60 * 60);\n      // console.log(dateString,date,hoursDifference);\n      if (hoursDifference <= 24) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n  const urlFault = sid => {\n    return `https://drs.infinite-uptime.com/reports-doc/` + sid;\n  };\n  //console.log(animationDuration);\n  const urlAA = ele => {\n    console.log(\"clicked\");\n    window.open(\"https://idap.infinite-uptime.com/#/dashboard/MonitoringTable\");\n    // document.cookie = \"idap-machineName-PROD=1BE304 - 02-GEARBOX; domain=.infinite-uptime.com\"//but we tried to set cookies here-hard coded\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alerts-bar\",\n    style: {\n      background: \"#ffc0c0\",\n      color: \"red\"\n    },\n    onMouseEnter: () => setAnimationPaused(true),\n    onMouseLeave: () => setAnimationPaused(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `marquee ${animationPaused ? 'marquee-paused' : ''}`,\n      style: {\n        animation: `marquee ${animationDuration}s linear infinite`\n      },\n      children: totalAlerts && totalAlerts.length > 0 ? totalAlerts.map((ele, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ele.status ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" New Fault identified for Plants \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold\",\n            children: ele.serviceReqMachineDetails[0] ? ele.serviceReqMachineDetails[0].plantName : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 46\n          }, this), \" : Machine : \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: urlFault(ele.id),\n              target: \"_blank\",\n              style: {\n                color: \"red\"\n              },\n              children: ele.serviceReqMachineDetails[0] ? ele.serviceReqMachineDetails[0].machineName : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 198\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 171\n          }, this), \" | \"]\n        }, void 0, true) : ele.anomalyDetected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" New Anomaly Alert Generated for Plants \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold\",\n            children: ele.plantName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 74\n          }, this), \" : Machine :\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-bold hover\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: e => {\n                urlAA(ele.machineName);\n              },\n              target: \"_blank\",\n              style: {\n                color: \"red\"\n              },\n              children: ele.machineName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 168\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 135\n          }, this), \" | \"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }, this)) : lengthofDisplay ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"No Anomaly Alert or New Faults Notifications in Last 24 Hours \"\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"No Anomaly Alert or New Faults Notifications in Last 24 Hours\"\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 7\n  }, this);\n};\n_s(AlertsBar, \"kGfX8H4/3bmQLg4o7n1S1DyL21A=\");\n_c = AlertsBar;\nexport default AlertsBar;\nvar _c;\n$RefreshReg$(_c, \"AlertsBar\");","map":{"version":3,"names":["React","useState","useEffect","LoginCredentialsAndQueries","jsxDEV","_jsxDEV","Fragment","_Fragment","AlertsBar","prop","_s","accessToken","setAccessToken","dataDisplay","setDataDisplay","totalAlerts","setTotalAlerts","animationDuration","setAnimationDuration","animationPaused","setAnimationPaused","contentLength","totalPlants","plantsData","currentPlant","fetchDataz","response","length","error","console","fetchData","now","Date","dtTo","toISOString","replace","dtFrom","getTime","fetchPromises","map","element","plantid","fetch","method","headers","accept","Authorization","ok","data","json","response2","data2","Object","keys","newData","push","alertsData","Promise","all","dummy","ele","undefined","alert1","flat","key","alert2","filter","status","alert2v1","newAlert","check24","combinedAlerts","prevAlert","lengthofDisplay","reduce","textValues","values","value","textLength","join","isNaN","durationFactor","calculatedDuration","Math","max","parseCustomDate","dateString","dateObject","createdDate","date","currentDate","timeDifference","hoursDifference","urlFault","sid","urlAA","log","window","open","className","style","background","color","onMouseEnter","onMouseLeave","children","animation","index","serviceReqMachineDetails","plantName","fileName","_jsxFileName","lineNumber","columnNumber","href","id","target","machineName","anomalyDetected","onClick","e","_c","$RefreshReg$"],"sources":["C:/Users/demo/Desktop/CRV/Zoho_widget_React/react_app/src/Components/Containers/Scrollbar/AlertsBar.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { LoginCredentialsAndQueries } from \"../../../Services/loginCredentialsAndQueries\";\nimport './AlertsBar.css';\n\nconst AlertsBar = ( prop) => {\n\n    const [accessToken, setAccessToken] = useState(\"\");\n  const [dataDisplay, setDataDisplay] = useState();\n  const [totalAlerts,setTotalAlerts ] = useState([]);\n  const [animationDuration,setAnimationDuration]=useState(30);\n  const [animationPaused,setAnimationPaused]=useState(false);\n  let contentLength = 0;\n\n\n  const totalPlants=prop.plantsData;\n  const currentPlant = prop.currentPlant;\n  //console.log(\"AA1\", currentPlant[0].plantid, accessToken);\n\n  useEffect(() => {\n    const fetchDataz = async () => {\n      try {\n        const response = await LoginCredentialsAndQueries();\n        if (response.length > 0) {\n          //console.log(\"responseAA\", response);\n          setAccessToken(response);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchDataz();\n  }, [prop.currentPlant]);\n\n  //let plantid = currentPlant[0].plantid;\n  useEffect(() => {\n    const fetchData = async () => {\n      let now = new Date();\n      let dtTo = now.toISOString().replace(/\\.\\d+Z$/, \"Z\").replace(/:/g, \"%3A\");\n      let dtFrom = new Date(now.getTime() - 24 * 60 * 60 * 1000)\n        .toISOString()\n        .replace(/\\.\\d+Z$/, \"Z\")\n        .replace(/:/g, \"%3A\");\n\n      try {\n        const fetchPromises = totalPlants.map(async (element) => {\n          //console.log()\n          const plantid = element[0].plantid;\n          //console.log(\"id\"+plantid);\n          const response = await fetch(\n            \"https://api.infinite-uptime.com/api/3.0/idap-api/anomaly-alerts/plants?plantIds=\" +\n              plantid +\n              \"&from=\" +\n              dtFrom +\n              \"&to=\" +\n              dtTo,\n            {\n              method: \"GET\",\n              headers: {\n                accept: \"application/json\",\n                Authorization: \"Bearer \" + accessToken,\n              },\n            }\n          );\n          if (response.ok) {\n            const data = await response.json();\n            // console.log(\"datacheck1\"+data.data.length);\n           // console.log(\"datacheck1\"+data.data.length);\n            if (data && data.data.length > 0) {\n\n            const response2 = await fetch(\n              \"https://api.infinite-uptime.com/api/3.0/idap-api/service-requests?plantIds=\" + plantid,\n              {\n                method: \"GET\",\n                headers: {\n                  accept: \"application/json\",\n                  Authorization: \"Bearer \" + accessToken,\n                },\n              }\n            );\n             // console.log(response2.ok);\n            if (response2.ok) {\n              \n              const data2 = await response2.json();\n             // console.log(\"datacheck2\"+data2);\n              if (data2 && data.data.length>0&&Object.keys(data2).length > 0) {\n              let newData = [];\n              newData.push(data);\n              newData.push(data2);\n              return newData;\n            }\n          }\n        }\n      }\n        \n\n          // Handle cases where the API call is not successful (e.g., 401 Unauthorized)\n         // return null;\n          //console.log(\"data2\",data2);\n        \n        });\n\n        const alertsData = await Promise.all(fetchPromises);\n        //console.log(\"data\",JSON.stringify(alertsData));\n        let dummy =[];\n        alertsData.map((ele)=>{\n          if(ele!=undefined){\n          //aa\n          const alert1=ele[0].data.flat();\n          //mf\n          let key = Object.keys(ele[1].data);\n         // console.log(key);\n          const alert2 = ele[1].data[key].filter((ele) => ele.status === \"NEW\");\n          dummy.push(alert1);\n          const alert2v1=(alert2)=>{\n            \n            let newAlert=[];\n            alert2.map((ele)=>{\n              if(check24(ele)){\n                newAlert.push(ele);\n                //dummy.push(ele);\n              }\n            })\n           return newAlert;\n          }\n          \n          dummy.push(alert2v1(alert2));\n        }\n          \n        })\n        //console.log(\"hero\"+JSON.stringify(dummy));\n        // Combine all alerts from different plants into a single array\n        const combinedAlerts = dummy.flat();\n        //console.log(combinedAlerts);\n       // const newZ=combinedAlerts.push(\"=\");\n        setTotalAlerts(prevAlert=>prevAlert.length===combinedAlerts.length?prevAlert:combinedAlerts);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n     \n     \n    fetchData();\n    // const interval = setInterval(fetchData, 30000);\n\n    // return () => {\n    //   clearInterval(interval);\n    // };\n  }, [currentPlant, accessToken, totalPlants,totalAlerts]);\n  //console.log(\"data\"+JSON.stringify(totalAlerts),totalAlerts.length);\n  let lengthofDisplay = totalAlerts && totalAlerts.length == 0;\n  useEffect(() => {\n    if (totalAlerts && totalAlerts.length > 0) {\n      contentLength = totalAlerts.reduce((length, ele) => {\n        if (ele) {\n          const textValues = Object.values(ele).filter((value) => typeof value === \"string\");\n          const textLength = textValues.join('').length;\n          return length + textLength;\n        }\n        return length;\n      }, 0);\n\n      if (!isNaN(contentLength) && contentLength > 0) {\n        const durationFactor = 0.05;\n        const calculatedDuration = Math.max(30, contentLength * durationFactor);\n        setAnimationDuration(calculatedDuration);\n      } else {\n        console.error(\"invalid content length\", contentLength);\n      }\n    }\n  }, [totalAlerts]);\n\n\n  //  console.log(\"checking\",lengthofDisplay,dataDisplay.data.length)\n  \n    function parseCustomDate(dateString) {\n      const dateObject = new Date(dateString);\n      return dateObject;\n      }\n    const check24=(ele)=>{\n      \n      if(ele.status){\n        \n        const dateString = parseCustomDate(ele.createdDate);\n        const date = new Date(dateString);\n        const currentDate = new Date();\n        const timeDifference = currentDate - date;\n        const hoursDifference = timeDifference / (1000 * 60 * 60);\n       // console.log(dateString,date,hoursDifference);\n        if (hoursDifference <= 24) {\n          return true;\n        } else {\n          return false;\n        }  \n      }\n      else{\n        return false;\n      }\n    }\n    const urlFault=(sid)=>{\n      return `https://drs.infinite-uptime.com/reports-doc/`+sid\n    }\n    //console.log(animationDuration);\n    const urlAA=(ele)=>{\n      console.log(\"clicked\");\n        window.open(\"https://idap.infinite-uptime.com/#/dashboard/MonitoringTable\");\n        // document.cookie = \"idap-machineName-PROD=1BE304 - 02-GEARBOX; domain=.infinite-uptime.com\"//but we tried to set cookies here-hard coded\n \n\n\n    }\n\n\n\n\n    return (\n      \n      <div className=\"alerts-bar\" style={{ background: \"#ffc0c0\",color:\"red\" }}onMouseEnter={() => setAnimationPaused(true)} onMouseLeave={() => setAnimationPaused(false)}>\n        <div className={`marquee ${animationPaused ? 'marquee-paused' : ''}`} style={{animation:`marquee ${animationDuration}s linear infinite`}} >\n         \n        {totalAlerts && totalAlerts.length > 0 ? ( \n  totalAlerts.map((ele,index) => (\n    <span key={index}>\n      { ele.status ? \n        (<> New Fault identified for Plants {<span className=\"fw-bold\">{ele.serviceReqMachineDetails[0]?ele.serviceReqMachineDetails[0].plantName:\"\"}</span>} : Machine : <span className=\"fw-bold\"> <a href={urlFault(ele.id)} target=\"_blank\" style={{ color:\"red\"}}>{ele.serviceReqMachineDetails[0]?ele.serviceReqMachineDetails[0].machineName:\"\"}</a></span> | </> )      : \n        (ele.anomalyDetected?(<> New Anomaly Alert Generated for Plants {<span className=\"fw-bold\">{ele.plantName}</span>} : Machine :<span className=\"fw-bold hover\"> <span onClick={(e)=>{urlAA(ele.machineName)}} target=\"_blank\" style={{ color:\"red\"}}>{ele.machineName}</span></span> | </>):<></>)\n    }\n      \n    </span>\n  ))\n) : (\n  lengthofDisplay ? (\n    <>No Anomaly Alert or New Faults Notifications in Last 24 Hours </>\n  ) : (\n    <>No Anomaly Alert or New Faults Notifications in Last 24 Hours</>\n  )\n)}\n\n        </div>\n        \n      </div>\n    );\n  };\n  \n\nexport default AlertsBar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}