{"ast":null,"code":"import _slicedToArray from\"C:/Users/demo/Desktop/CRV/Zoho_widget_React/react_app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var PatternStorage=function PatternStorage(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),pattern=_useState2[0],setPattern=_useState2[1];var curPlId=props.cp[0].plantid;//console.log(props.cp[0].plantid,props.cp[0].plantName);\nuseEffect(function(){// console.log(\"PatternStorage Working\");\nvar newPattern=[];props.plantsData.forEach(function(item){if(item!==undefined){var newItems=item[0].plantid;newPattern.push(newItems);}});// Reorder the pattern if cp changes\nvar currentIndex=newPattern.indexOf(props.cp[0].plantid);if(currentIndex!==-1){newPattern.splice(currentIndex,1);newPattern.unshift(props.cp[0].plantid);}setPattern(newPattern);// Store the pattern in sessionStorage\n// sessionStorage.setItem('plantPattern', JSON.stringify(newPattern));\nvar loginResponse=window.ZOHO.CREATOR.init().then(function(data){var accessTokenz=\"\";var userid=window.ZOHO.CREATOR.UTIL.getQueryParams().user;var config={appName:\"infinite-control-room\",reportName:\"My_Profile_Data\",criteria:\"Username == \\\"\"+userid+\"\\\"\",page:\"1\",pageSize:\"100\"};var access=window.ZOHO.CREATOR.API.getAllRecords(config).then(function(response){var idx=response.data[0].ID;console.log(idx);var formData={\"data\":{\"PlantPattern\":JSON.stringify(newPattern)}};var config={appName:\"infinite-control-room\",reportName:\"My_Profile_Data\",id:idx,data:formData};var acce=window.ZOHO.CREATOR.API.updateRecord(config).then(function(response){console.log(response);if(response.code==3000&&response.message==\"Data Updated Successfully\"){console.log(\"working\");}});});});//console.log(access);\n},[props.plantsData,curPlId]);// console.log(sessionStorage.getItem('plantPattern'));\n//sessionStorage.clear();\n// Render your component\nreturn/*#__PURE__*/_jsx(_Fragment,{});};export default PatternStorage;","map":{"version":3,"names":["React","useEffect","useState","Fragment","_Fragment","jsx","_jsx","PatternStorage","props","_useState","_useState2","_slicedToArray","pattern","setPattern","curPlId","cp","plantid","newPattern","plantsData","forEach","item","undefined","newItems","push","currentIndex","indexOf","splice","unshift","loginResponse","window","ZOHO","CREATOR","init","then","data","accessTokenz","userid","UTIL","getQueryParams","user","config","appName","reportName","criteria","page","pageSize","access","API","getAllRecords","response","idx","ID","console","log","formData","JSON","stringify","id","acce","updateRecord","code","message"],"sources":["C:/Users/demo/Desktop/CRV/Zoho_widget_React/react_app/src/Components/Containers/PatternStorage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst PatternStorage = (props) => {\r\n    const [pattern, setPattern] = useState([]);\r\n    const curPlId=props.cp[0].plantid;\r\n    //console.log(props.cp[0].plantid,props.cp[0].plantName);\r\n\r\n    useEffect(() => {\r\n       // console.log(\"PatternStorage Working\");\r\n        const newPattern = [];\r\n        props.plantsData.forEach((item) => {\r\n            if (item !== undefined) {\r\n                const newItems = item[0].plantid;\r\n                newPattern.push(newItems);\r\n            }\r\n        });\r\n\r\n        // Reorder the pattern if cp changes\r\n        const currentIndex = newPattern.indexOf(props.cp[0].plantid);\r\n        if (currentIndex !== -1) {\r\n            newPattern.splice(currentIndex, 1);\r\n            newPattern.unshift(props.cp[0].plantid);\r\n        }\r\n\r\n        setPattern(newPattern);\r\n        // Store the pattern in sessionStorage\r\n       // sessionStorage.setItem('plantPattern', JSON.stringify(newPattern));\r\n        const loginResponse =  window.ZOHO.CREATOR.init().then(function (data) {\r\n            let accessTokenz = \"\";\r\n            let userid = window.ZOHO.CREATOR.UTIL.getQueryParams().user;\r\n      \r\n            var config = {\r\n              appName: \"infinite-control-room\",\r\n              reportName: \"My_Profile_Data\",\r\n              criteria: \"Username == \\\"\" + userid + \"\\\"\",\r\n              page: \"1\",\r\n              pageSize: \"100\"\r\n            };\r\n      \r\n            const access = window.ZOHO.CREATOR.API.getAllRecords(config).then(function (response) {\r\n            const idx=response.data[0].ID;\r\n            console.log(idx);\r\n            const formData={\r\n                \"data\": {\r\n                  \"PlantPattern\": JSON.stringify(newPattern)\r\n                }\r\n            }\r\n           const  config = {\r\n                appName : \"infinite-control-room\",\r\n                reportName  : \"My_Profile_Data\",\r\n                id: idx,\r\n                data : formData\r\n              };\r\n              const acce=window.ZOHO.CREATOR.API.updateRecord(config).then(function(response){\r\n               \r\n            console.log(response);\r\n\r\n                if(response.code == 3000 && response.message == \"Data Updated Successfully\"){\r\n                   console.log(\"working\");\r\n                }\r\n              });\r\n            });\r\n           \r\n          });\r\n          //console.log(access);\r\n    }, [props.plantsData, curPlId]);\r\n\r\n   // console.log(sessionStorage.getItem('plantPattern'));\r\n//sessionStorage.clear();\r\n    // Render your component\r\n    return <></>;\r\n};\r\n\r\nexport default PatternStorage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}